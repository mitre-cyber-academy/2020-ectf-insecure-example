#!/usr/bin/env python3

"""
Description: Creates user specific secrets
Use: Once per user
"""

from argparse import ArgumentParser     # For command line argument parsing
from secrets import token_hex           # For random hex number generation
from hashlib import sha256              # For hashing
from random import randint              # For random integer generation
import json                             # For JSON encoded output



"""
Writes user secrets to json file

    Args:
        users_ (string): string of users and pins seperated by colons e.g. user1:123456789
        outfile (string): name of file to write user_secrets to
"""
def main(user_list, outfile):

    # Open outfile in write mode
    try:
        secrets = open(outfile[0], mode="w")

    # If outfile cannot be opened, print an error message
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0

    try:
        # Intitialize empty list
        userList = []

        for entry in user_list:

            # Generate random 6 character hex for userID
            userID = token_hex(3)

            # Extract username from entry
            userName = entry.split(":")[0]

            # Generate random 6 character hex for salt
            salt = token_hex(3)

            # Extract pin from user_list
            pin = entry.split(":")[1]

            # Has pin and salt
            hashedPin = sha256((pin + salt).encode("utf-8")).hexdigest()

            # Add entry to user list
            userList.append({
                "userID": userID,
                "userName": userName,
                "hashedPin": hashedPin,
                "salt": salt
            })

    # If username and/or pin cannot be parsed print an error message
    except IndexError:
        raise Exception(
            "Unable to parse user name and pin. Please make sure you entered the user-list as "
            "space seperated pairs of usernames and pins. Example: --user-list user1:12345678 user2:12345689")
    
    # Encode userDictionary as JSON
    dataToWrite = json.dumps(userList, indent=4)

    # Write JSON to outfile
    secrets.write(dataToWrite)

    # Close outfile
    secrets.close()



"""
Gets arguments from command line

    Returns:
        user_list A list of users, hashes of salted passwords and passwords
        outfile A file path for the eventual file to be written containing user_list
"""
def get_args():
    # Initialize Argument Parser
    parser = ArgumentParser(description='Generates json encoded file containing usernames, user IDs, hashed salted passwords and salts.')

    # Add --user-list argument to store an arbitrary number of usernames and pins
    parser.add_argument('--user-list', nargs='+',
                        help='List of users and pins seperated by a colon:\nEx: "user1:12345678 user2:12345679" ',
                        required=True)
    
    # Add --outfile argument to store a single output filepath
    parser.add_argument('--outfile', nargs=1,
                        help='Location to save user secrets file',
                        required=True)
    
    # Call to parse arguments
    args = parser.parse_args()

    return args.user_list, args.outfile



# Treats script as a standalone and does 
if __name__ == '__main__':

    # Parse inputs and store them as variables
    users, outfile = get_args()

    # Branding
    print("""MMMMMMMMMMMMMMMMMMMMMMMMWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWMMMMMMMMMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMWk;,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,;;:cdkKWMMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMWWO. .:ccccccccccccccccccccccccccccccccccccccccccc:::;,'. .;xXWMMMMMMM
MMMMMMMMMMMMMMMMMMMMWK, .xk:;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::clloo:. ;0MMMMMMM
MMMMMMMMMMMMMMMMMMMMX: .dx.                                                  'xd. :XMMMMMM
MMMMMMMMMMMMMMMMMMMXc .ok'                                                    ;0: .OMMMMMM
MMMMMMMMMMMMMMMMMMNo. cXOlllccl;               'clllllllllccllc:.             cO, '0MMMMMM
MMMMMMMMMMMMMMMMMWd.  .;;;;;;xXc              ;Oo;;;;;;;;;;;;;;kO.           .ko  oWMMMMMM
MMMMMMMMMMMMMMMMMXd::::::'  ,kl             'okl             .:kl           .xx. ;XMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMM0, .kd.            .oKOdlllllllllllllll,           .dx. ,0MMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMMX; .dx.              .................             'xd. ,0MMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMMXc  ok'                                           'ox:. :0MMMMMMMMMM
MMMMMMMMMMMMMMMMMMMMMNl  lk,                                      ..,:loo:. 'xNMMMMMMMMMMM
MMMMMMMMMMWMWK000000Oo. :O;             ,oollclllllllllllllllllllclllc,. .:xXWWMMMMMMMMMMM
MMMMMMMMMMMWx........  ;Oc             ;Ol.......................  ..';lxKWWWMMMMMMMMMMMMM
MMMMMMMMMMWk. 'oollllllxl             .dOdlllllox,  ,dddddddddddxkO0XNWMMMMMMMMMMMMMMMMMMM
MMMMMMMMMM0' 'kd........               .......'kk. ,0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMMK; .xd.                             .lO, .OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMMX: .ox.                             :OO; .xWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMMNl  ;kxccllllllllllllllllllllllllclllxk: .oXXXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMWd.   .................................   lN0ooKMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
MMMMMMNOxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxdxxdxxddkNMNKKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
    """)

    # Print status message
    print("\n" + "Generating user speific secrets" + "\n\n")

    main(users, outfile)