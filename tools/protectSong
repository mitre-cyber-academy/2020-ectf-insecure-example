#!/usr/bin/env python3
"""
Description: Protects song by adding metadata or any other security measures
Use: Once per song
"""

#import load from json to open json files for region and user secrets
from json import load
#Used for converting struct to basic types and converts it to bytes
from struct import pack
#used in conjecttion with open for certain file locations
from os import path
#
import wave
from argparse import ArgumentParser
from numpy import frombuffer, int16 as np

# Used for encryption
import nacl.bindings as b
import nacl.exceptions as exc
import nacl.hash
import nacl.encoding

# calculating the chunk remainder
from math import floor

# TODO: Move encryption processes to separate functions
# TODO: Map arguments to correct variables
# TODO: Move nonces to encrypted chunk, keep first nonce public

class ProtectedSong(object):
    """Example song object for protected song"""

    def __init__(self, path_to_song, metadata):
        """initialize values
        :
            path_to_song (string): file name where the song to be provisioned is stored
            metadata (bytearray): bytes containing metadata information
        """
        self.song = path_to_song
        self.metadata = metadata
        self.metadata_size = metadata[:1]

    def encrypt_song(self, keys_loc, outfile):
        # Configuration Variables
        chunk_size = 20480
        hash_byte_size = 12     # Take 12 bytes of a 256 bit hash
        wave_header_size = 44   # http://soundfile.sapp.org/doc/WaveFormat/
        aad_size = 4            # Use 4 bytes to store aad size
        metadata_size_allocation = 4

        encoder = nacl.encoding.RawEncoder
        encrypted_file_size = 0 # Track total file size

        print("Setting chunksize to " + str(chunk_size) + " bytes")

        # Open song for reading raw data
        song = open(self.song, "rb")

        # Read wav file header
        wave_header = song.read(wave_header_size)

        # The last 4 bytes of a wav file header includes the song size
        song_info_size = int.from_bytes(wave_header[-4:], byteorder='little')
        print("Song size: " + str(song_info_size))

        # Calculate number of chunks to read
        chunk_to_read = floor(song_info_size / chunk_size)
        print("Chunks to read: " + str(chunk_to_read))

        # Calculate remainder
        chunk_remainder = song_info_size % chunk_size
        print("Chunk remainder size: " + str(chunk_remainder))

        # Append metadata size onto fileheader
        metadata_size = len(self.metadata).to_bytes(metadata_size_allocation, 'little')
        print("Metadata Size: " + str(metadata_size))
        print("Wave header: " + str(wave_header))
        wave_header_combined = wave_header + metadata_size

        encrypted_file_size += len(self.metadata)

        # Open secrets
        keys_file = load(open(keys_loc, "r"))

        print("key " + keys_file["key"])
        print("iv " + keys_file["iv"])
        
        key = bytes.fromhex(keys_file["key"])
        iv = bytes.fromhex(keys_file["iv"])

        print("Starting encrypt song")

        # Calculate header hash for nonce
        header_hash = nacl.hash.sha256(wave_header_combined, encoder=encoder)

        # Take first 12 bytes of header hash
        nonce = header_hash[:hash_byte_size]
        print("Wave Header Nonce: " + str(nonce))

        # Open encrypted song file pointer
        encrypted_song = open(outfile, "wb")
        
        # Write the 12 bytes of the header hash
        encrypted_song.write(nonce)

        aad = b"wave_header\0"
        
        # Encrypt Wav Header
        encrypted_header = b.crypto_aead_chacha20poly1305_ietf_encrypt(wave_header_combined, aad, nonce, key)

        # Write Encrypted wave header
        encrypted_song.write(encrypted_header)

        #Hash Metadata
        metadata_hash = nacl.hash.sha256(self.metadata, encoder=encoder)
        
        nonce = metadata_hash[:hash_byte_size]

        #Write nonce to encrypted_song
        encrypted_song.write(nonce)

        #Set aad to constant string
        aad = b"meta_data\0"

        #apply chacha encryption to the meta data.
        encrypted_metadata = b.crypto_aead_chacha20poly1305_ietf_encrypt(self.metadata, aad, nonce, key)

        #encrypted file size
        encrypted_file_size += len(encrypted_metadata)

        # Write encrypted metadata
        encrypted_metadata_tag = encrypted_metadata[-16:] # Mac_tag size
        print("Metadata tag: " + str(encrypted_metadata_tag))

        encrypted_metadata_wo_tag = encrypted_metadata[:len(self.metadata)]
        print("Encrypted metadata: " + str(encrypted_metadata_wo_tag))

        encrypted_song.write(encrypted_metadata_tag)
        encrypted_song.write(encrypted_metadata_wo_tag)

        # Add 1 since range is exclusive
        for i in range(1, chunk_to_read + 1):
            #print("Working on Chunk " + str(i))
            chunk_buffer = song.read(chunk_size)

            chunk_hash = nacl.hash.sha256(chunk_buffer, encoder=encoder)
            #print("Chunk Hash: " + str(chunk_hash))

            #set nonce to hash
            nonce = chunk_hash[:hash_byte_size]

            #write nonce to encrypted song
            encrypted_song.write(nonce)
            
            #aad equal to most signifigant bit?
            aad = int.to_bytes(i, aad_size, 'little')

            encrypted_chunk = b.crypto_aead_chacha20poly1305_ietf_encrypt(chunk_buffer, aad, nonce, key)
            #print("Encrypted Chunk Size: " + str(len(encrypted_chunk)))

            encrypted_chunk_tag = encrypted_chunk[-16:]
            encrypted_chunk_wo_tag = encrypted_chunk[:chunk_size]

            # Write chunk
            encrypted_song.write(encrypted_chunk_tag)
            encrypted_song.write(encrypted_chunk_wo_tag)
            
        print("Working on Remainder")
        #reading bytes per chunk
        chunk_buffer = song.read(chunk_remainder)

        print("Buffer size: " + str(len(chunk_buffer)))

        #Hashes chunk
        chunk_hash = nacl.hash.sha256(chunk_buffer, encoder=encoder)
        print("Chunk Hash: " + str(chunk_hash))

        #sets nonce eqaul to chunk hash bytes
        nonce = chunk_hash[:hash_byte_size]

        #write the nonce to the encrypted song
        encrypted_song.write(nonce)

        #encrypts chunk with aad, nonce, key, chunk_buffer
        aad = int.to_bytes(chunk_to_read + 1, aad_size, 'little')
        encrypted_chunk = b.crypto_aead_chacha20poly1305_ietf_encrypt(chunk_buffer, aad, nonce, key)

        #sets encrypted chunk tag to the last 16 characters
        encrypted_chunk_tag = encrypted_chunk[-16:]
        encrypted_chunk_wo_tag = encrypted_chunk[:chunk_remainder]

        print("Encrypted Remainder Size: " + str(len(encrypted_chunk)))

        # Write remainders
        encrypted_song.write(encrypted_chunk_tag)
        encrypted_song.write(encrypted_chunk_wo_tag)

        #close encrypted song
        encrypted_song.close()

        song.close()

        print("Encryption Success")

def create_metadata(regions, user, user_secret_location, region_info):
    """Returns a byte string formatted as follows:
    METADATA_LENGTH(1B)/ownerID(1B)/REGION_LEN(1B)/USER_LEN(1B)/REGIONID1(1B)/REGIONID2 (1B)/.../opt. parity
    Args:
        regions (list): list of regions to provision song for
        user (string): user name for owner of the song
        user_secret_location (string): path to user secrets file
        region_info (dict): mapping of regions provided by region_information.json
    Returns:
        metadata (bytes): bytes of encoded metadata
    Example:
        >>create_metadata(['USA', 'Canada'], 'user1', 'user_secrets.json', {'USA': 1, 'Canada':2})
        'x06/x00/x01/x00/x01/x02'
    """
    user_secrets = load(open(path.abspath(user_secret_location)))

    # note: metadata must be an even length since each sample is 2B long
    # and ARM processors require memory accesses to be aligned to the type size
    metadata = pack(
        '=3B{regions_length}s{regions_len_2}s'.format(regions_length=len(regions), regions_len_2=len(regions) % 2),
        int(user_secrets[user]['id']), len(regions), 0,
        bytes([region_info[str(r)] for r in regions]),
        b'\x00' if len(regions) % 2 else b'')
    return bytes([len(metadata) + 1]) + metadata


def main():
    """Main function
    Description:
        Parses Arguments sent through the terminal, and initiates the song encryption process

    Returns:
        none
    """
    parser = ArgumentParser(description='main interface to protect songs')
    parser.add_argument('--region-list', nargs='+', help='List of regions song can be played in', required=True)
    parser.add_argument('--region-secrets-path', help='File location for the region secrets file',
                        required=True)
    parser.add_argument('--outfile', help='path to save the protected song', required=True)
    parser.add_argument('--infile', help='path to unprotected song', required=True)
    parser.add_argument('--owner', help='owner of song', required=True)
    parser.add_argument('--user-secrets-path', help='File location for the user secrets file', required=True)
    args = parser.parse_args()

    regions = load(open(path.abspath(args.region_secrets_path)))
    try:
        metadata = create_metadata(args.region_list, args.owner, args.user_secrets_path, regions)
    except ValueError:
        raise ValueError('Ensure all user IDs are integers and all regions are in the provided region_information.json')
    protected_song = ProtectedSong(args.infile, metadata)
    protected_song.encrypt_song("keys.json", args.outfile)

#initites main()
if __name__ == '__main__':
    main()
