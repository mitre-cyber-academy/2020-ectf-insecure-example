#!/usr/bin/env python3
"""
Description: Creates device specific secrets
Use: Once per device
"""

from os import mkdir, path              # For file creation and manipulation
from json import dump, load, dumps      # For working with JSON data
from argparse import ArgumentParser     # Parse through arguments passed through the terminal
from secrets import token_hex           # Alows for generating random hex characters



"""
Description decrypts song 
    Args:
        region_names: the names of regions passed through the terminal
        user_names: names of users passed through the terminal
        user_secrets: path to user_secrets file
        region_secrets: path to region secrets file
        device_dir: directory to device

    Returns:
        Writes data to device secrets file
"""
def main(valid_regions, valid_users, user_secrets, region_secrets, device_dir):
    # Build dictionary of all users and regions
    allData = {"users": user_secrets, "regions": region_secrets}

    # Encode dictionary of all users and regions in JSON
    allDataJson = dumps(allData)

    # Add escape characters to all users and regions JSON
    escapedAllDataJson = allDataJson.replace("\"", "\\\"")

    # Remove invalid users from dictionary of all users and regions
    for user in allData['users']:
        if user['userName'] not in valid_users:
            allData['users'].remove(user)

    # Remove invalid regions from dictionary of all users and regions
    for region in allData['regions']:
        if region['regionName'] not in valid_regions:
            allData['regions'].remove(region)

    # Encode dictionary of valud users and regions in JSON
    validDataJson = dumps(allData)

    # Add escape characters to valid users and regions JSON
    escapedValidDataJson = allDataJson.replace("\"", "\\\"")

    # Create device specific key
    device_key = token_hex(32)

    # Make device directory
    if not path.isdir(device_dir):
        print("real boobs")
        mkdir(device_dir)

    # Make output file path
    outfile = path.join(device_dir, "device_secrets")

    # Open device_secrets file and write data to it
    with open(outfile, mode="w") as header:
        header.write("""
        #ifndef SECRETS_H
        #define SECRETS_H

        // Device Specific Key
        const char *KEY_HEX = "{device_key}";

        // JSON Payload of All Users and Regions
        const char *user_data = "{escapedAllDataJson}";


        // JSON Payload of Valid Users and Regions
        const char *user_data = "{escapedValidDataJson}";


        #endif // SECRETS_H
        """.format(device_key=device_key, escapedAllDataJson=escapedAllDataJson, escapedValidDataJson=escapedValidDataJson))



"""
Description Gets arguments from the command line
Returns:
    arguments passed through the command-line including:
    user-defined region list, region_secrets json directory, user-defined users list, 
    user_secrets json directory, and the device directory
"""
def get_args():

    # Initialize Argument Parser
    parser = ArgumentParser(description='Generate device ')

    # Add --region-list argument to store an arbitrary number valid regions
    parser.add_argument('--region-list', nargs='+',
                        help='Regions the player is provisioned for.', required=True)

    # Add --region-secrets-path argument to store the path to the region_secrets file
    parser.add_argument('--region-secrets-path', nargs=1,
                         help='Path to region secrets file.', required=True)

    # Add --user-list argument to store an arbitrary number valid users
    parser.add_argument('--user-list', nargs='+',
                        help='List of users seperated by a space to provision the device for.', required=True)

    # Add --user-secrets-path argument to store the path to the user_secrets file
    parser.add_argument('--user-secrets-path', nargs=1,
                        help='Path to user secrets file generated in createUsers.py', required=True)

    # Add --device-dir argument to store the path to the device_dir directory
    parser.add_argument('--device-dir', nargs=1,
                        help='Path to output any required information for the device.', required=True)

    # Call to parse arguments
    args = parser.parse_args()


    return args.region_list, args.region_secrets_path, args.user_list, args.user_secrets_path, args.device_dir
      


# Treat as a standalone script
if __name__ == '__main__':

    # Parse inputs and store them as variables
    valid_regions, region_secrets, valid_users, user_secrets, device_dir = get_args()

    # Branding
    print("""
    ________▄▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▀▄______
    _______█░░▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░█_____
    _______█░▒▒▒▒▒▒▒▒▒▒▄▀▀▄▒▒▒░░█▄▀▀▄_
    __▄▄___█░▒▒▒▒▒▒▒▒▒▒█▓▓▓▀▄▄▄▄▀▓▓▓█_
    █▓▓█▄▄█░▒▒▒▒▒▒▒▒▒▄▀▓▓▓▓▓▓▓▓▓▓▓▓▀▄_
    _▀▄▄▓▓█░▒▒▒▒▒▒▒▒▒█▓▓▓▄█▓▓▓▄▓▄█▓▓█_
    _____▀▀█░▒▒▒▒▒▒▒▒▒█▓▒▒▓▄▓▓▄▓▓▄▓▒▒█
    ______▄█░░▒▒▒▒▒▒▒▒▒▀▄▓▓▀▀▀▀▀▀▀▓▄▀_
    ____▄▀▓▀█▄▄▄▄▄▄▄▄▄▄▄▄██████▀█▀▀___
    ____█▄▄▀_█▄▄▀_______█▄▄▀_▀▄▄█_____
    """)

    # Print status message
    print("\n" + "Generating device specific secrets." + "\n\n")

    # Parse the contents of user_secrets as JSON data and store
    user_secrets = load(open(path.abspath(user_secrets)))

    # Parse the contents of region_secrets as JSON data and store
    region_secrets = load(open(path.abspath(region_secrets)))

    main(valid_regions, valid_users, user_secrets, region_secrets, device_dir)