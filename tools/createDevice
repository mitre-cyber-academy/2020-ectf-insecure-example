#!/usr/bin/env python3
"""
Description: Creates device specific secrets
Use: Once per device
"""
#import ability to make directories and specify file paths
from os import mkdir, path
#Import json dump and load capabilities
from json import dump, load
#Parse through arguments passed through the terminal
from argparse import ArgumentParser
#Alows for generating random hex characters
from secrets import token_hex


def main(region_names, user_names, user_secrets, region_secrets, device_dir):
    """Description decrypts song 
    Args:
        region_names: the names of regions passed through the terminal
        user_names: names of users passed through the terminal
        user_secrets: path to user_secrets file
        region_secrets: path to region secrets file
        device_dir: directory to device
    Returns:
        /////////////////////////////////////////////////////////////////////////

    """
    file_name = "device_secrets"
    keys_loc = "keys.json"

    try:
        #attempts to open the keys_file
        keys_file = open(keys_loc, "w")
    except Exception as e:
        #exception handling if keys_file does't open
        print("Could not open {keys_loc}: {e}".format(keys_loc=keys_loc, e=e))

    try:
        key = token_hex(32)     # 256-bits
        iv = token_hex(12)      # 96-bits
        keys = {
            "key": key,
            "iv": iv
        }

        #puts keys in json keys_file 
        dump(keys, keys_file)
    except Exception as e:
        #exception handling for dumbing to json file and generating tokens
        print("Could not write json to {keys_loc}: {e}".format(keys_loc=keys_loc, e=e))

    # create device directory
    try:
        mkdir(device_dir)
    except Exception as e:
        #Exception handling for creating directory
        print("Could not create directory {device_dir}: {e}".format(device_dir=device_dir, e=e))
        return

    # create device secrets file
    try:
        device_secrets = open(path.join(device_dir, file_name), "w")
    except Exception as e:
        #exception handling for creating device secrets
        print("Unable to open secrets file: {e}".format(e=e))
        return
        

    
    # check for valid region names
    try:
        #rids = [str(region_secrets['regions']) for r in region_names]
        #print(rids)
        
        rids = []
        for region in region_secrets["regions"]:
            
            for validRegion in region_names:
                
                if(validRegion in region["regionName"]):
                    
                    rids.append(str(region))
        
    except Exception as e:
        #exception handling for region validty check
        print("Unable to create secrets file: {e} "
              "Please ensure all regions entered are in the list: {user_secrets}".format(e=e, user_secrets=user_secrets.keys()))
        return
    

    
    # check for valid user names
    try:
        #uids = [str(user_secrets['users']['userName']) for u in usernames]
        uids = []

        for user in user_secrets["users"]:

            for validUser in user_names:

                if(validUser in user["userName"]):

                    uids.append(str(user))
        
        #print(uids)
    except Exception as e:
        print("Unable to create secrets file: {e} "
              "Please ensure all users entered are in the list: {user_secrets}".format(e=e, user_secrets=user_secrets.keys()))
        return
    #////////////////////////////////////////////////////////////////////////////////////////
    # write secrets to device secrets

#///////// WTF is this crap /////////////////////////////////////////////////////////////////
    device_secrets.write(f'''
#ifndef SECRETS_H
#define SECRETS_H
#define NUM_REGIONS {len(region_secrets)}
const char *REGION_NAMES[] = {{ {", ".join(['"' + r + '"' for r in region_secrets])} }};
const u8 REGION_IDS[] = {{ {", ".join([str(r) for r in region_secrets.values()])} }};
#define NUM_PROVISIONED_REGIONS {len(region_names)}
const u8 PROVISIONED_RIDS[] = {{ {", ".join(rids)} }};
#define NUM_USERS {len(user_secrets)}
const char *USERNAMES[] = {{ {", ".join(['"' + u + '"' for u in user_secrets])} }};
const u8 USER_IDS[] = {{ {", ".join([str(user_secrets[u]['id']) for u in user_names])} }};
#define NUM_PROVISIONED_USERS {len(user_names)}
const u8 PROVISIONED_UIDS[] = {{ {", ".join(uids)} }};
const char *PROVISIONED_PINS[] = {{ {", ".join(['"' + user_secrets[u]['pin'] + '"' for u in user_names])} }};
#endif // SECRETS_H
''')
#////// WTF is this CRAP ^^^^^^////////////////////////////////////////////////////////////////

def get_args():
    """
    Description Gets arguments from the command line

    Returns:
        arguments passed through the command-line including:
        user-defined region list, region_secrets json directory, user-defined users list, 
        user_secrets json directory, and the device directory
    """
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', nargs='+', help='Regions the player is provisioned for.', required=True)
    parser.add_argument('--region-secrets-path', help='Path to region secrets file.', required=True)
    parser.add_argument('--user-list', help='List of users seperated by a space to provision the device for.',
                        nargs='+', required=True)
    parser.add_argument('--user-secrets-path', help='Path to user secrets file generated in createUsers.py',
                        required=True)
    parser.add_argument('--device-dir', help='Path to output any required information for the device.',
                        required=True)
    args = parser.parse_args()
    return args.region_list, args.region_secrets_path, args.user_list, args.user_secrets_path, args.device_dir

#initiates main
if __name__ == '__main__':
    #gets arguments from the terminal for region names, region secrets, usernames, user_secrets, and device_dir
    region_names, region_secrets, usernames, user_secrets, device_dir = get_args()
    print("generating device specific secrets")

    #opens user and regions secrets json files
    user_secrets = load(open(path.abspath(user_secrets)))
    region_secrets = load(open(path.abspath(region_secrets)))

    main(region_names, usernames, user_secrets, region_secrets, device_dir)